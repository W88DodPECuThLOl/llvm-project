//===-- Z80Subtarget.h - Define Subtarget for the Z80 ----------*- C++ -*--===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file declares the Z80 specific subclass of TargetSubtargetInfo.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_LIB_TARGET_Z80_Z80SUBTARGET_H
#define LLVM_LIB_TARGET_Z80_Z80SUBTARGET_H

#include "Z80FrameLowering.h"
#include "Z80ISelLowering.h"
#include "Z80InstrInfo.h"

#include "llvm/CodeGen/GlobalISel/CallLowering.h"
#include "llvm/CodeGen/GlobalISel/InstructionSelector.h"
#include "llvm/CodeGen/GlobalISel/LegalizerInfo.h"
#include "llvm/CodeGen/RegisterBankInfo.h"
#include "llvm/CodeGen/SelectionDAGTargetInfo.h"
#include "llvm/CodeGen/TargetSubtargetInfo.h"
#include "llvm/IR/DataLayout.h"
#include "llvm/MC/MCInstrItineraries.h"
#include "llvm/Support/Alignment.h"

#define GET_SUBTARGETINFO_HEADER
#include "Z80GenSubtargetInfo.inc"

namespace llvm {
class Z80TargetMachine;

class Z80Subtarget final : public Z80GenSubtargetInfo {
  const Z80TargetMachine &TM;
  SelectionDAGTargetInfo TSInfo;
  // Ordering here is important. Z80InstrInfo initializes Z80RegisterInfo which
  // Z80TargetLowering needs.
  Z80InstrInfo InstrInfo;
  Z80FrameLowering FrameLowering;
  Z80TargetLowering TLInfo;
  /// What processor and OS we're targeting.
  Triple TargetTriple;

  InstrItineraryData InstrItins;


  // SubtargetFeatureで定義した物を、ここで定義する
// Bool members corresponding to the SubtargetFeatures defined in tablegen
#define GET_SUBTARGETINFO_MACRO(ATTRIBUTE, DEFAULT, GETTER) \
  bool ATTRIBUTE = DEFAULT;
#include "Z80GenSubtargetInfo.inc"

private:
  Z80Subtarget &initializeSubtargetDependencies(StringRef CPU, Triple TT, StringRef TuneCPU, StringRef FS, const Z80TargetMachine &TM);
// void initializeEnvironment();

public:
  /// This constructor initializes the data members to match that
  /// of the specified triple.
  Z80Subtarget(const Triple &TT, StringRef CPU, StringRef TuneCPU, StringRef FS,
               const Z80TargetMachine &TM);

  /// ParseSubtargetFeatures - Parses features string setting specified
  /// subtarget options.  Definition of function is auto generated by tblgen.
  void ParseSubtargetFeatures(StringRef CPU, StringRef TuneCPU, StringRef FS);

  const Triple &getTargetTriple() const { return TargetTriple; }

  // SubtargetFeatureで定義した物のゲッター定義
// Getters for SubtargetFeatures defined in tablegen
#define GET_SUBTARGETINFO_MACRO(ATTRIBUTE, DEFAULT, GETTER) \
  bool GETTER() const { return ATTRIBUTE; }
#include "Z80GenSubtargetInfo.inc"

  const SelectionDAGTargetInfo *getSelectionDAGInfo() const override { return &TSInfo; }
  const Z80InstrInfo *getInstrInfo() const override { return &InstrInfo; }
  const Z80FrameLowering *getFrameLowering() const override { return &FrameLowering; }
  const Z80RegisterInfo *getRegisterInfo() const override { return &InstrInfo.getRegisterInfo(); }
  const Z80TargetLowering *getTargetLowering() const override { return &TLInfo; }
  const InstrItineraryData *getInstrItineraryData() const override { return &InstrItins; }

protected:
  /// GlobalISel related APIs.
  std::unique_ptr<CallLowering> CallLoweringInfo;
  std::unique_ptr<InstructionSelector> InstSelector;
  std::unique_ptr<LegalizerInfo> Legalizer;
  std::unique_ptr<RegisterBankInfo> RegBankInfo;
//  std::unique_ptr<Z80InlineAsmLowering> InlineAsmLoweringInfo;
public:
  const CallLowering *getCallLowering() const override;
  InstructionSelector *getInstructionSelector() const override;
  const LegalizerInfo *getLegalizerInfo() const override;
  const RegisterBankInfo *getRegBankInfo() const override;
//  const Z80InlineAsmLowering *getInlineAsmLowering() const override { return InlineAsmLoweringInfo.get(); }
};
} // namespace llvm

#endif
